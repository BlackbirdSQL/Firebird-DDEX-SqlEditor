<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OptionCategoryDebugging" xml:space="preserve">
    <value>Debugging</value>
  </data>
  <data name="OptionCategoryDiagnostics" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="OptionCategoryEntityFramework" xml:space="preserve">
    <value>EntityFramework settings</value>
  </data>
  <data name="OptionCategoryGeneral" xml:space="preserve">
    <value> General</value>
  </data>
  <data name="OptionCategoryQueryDesigner" xml:space="preserve">
    <value>Query designer</value>
  </data>
  <data name="OptionDescriptionEnableDiagnostics" xml:space="preserve">
    <value>Enables the execution of Diagnostics calls. This option should remain enabled. Disabling does not disable Exceptions.</value>
  </data>
  <data name="OptionDescriptionEnableDiagnosticsLog" xml:space="preserve">
    <value>Enables diagnostics logging to a log file.</value>
  </data>
  <data name="OptionDescriptionEnableFbDiagnostics" xml:space="preserve">
    <value>Enables the execution of Firebird Debug.Dug()/Debug.Trace() calls. Only applicable to builds that include the debug Firebird library.</value>
  </data>
  <data name="OptionDescriptionEnableTaskLog" xml:space="preserve">
    <value>Enables logging of tasks to the output window pane. This option should remain enabled.</value>
  </data>
  <data name="OptionDescriptionEnableTrace" xml:space="preserve">
    <value>Enables the execution of Diag.Trace() calls.</value>
  </data>
  <data name="OptionDescriptionEnableTracer" xml:space="preserve">
    <value>Enables Sql Tracer output to be directed to Diag.Trace().</value>
  </data>
  <data name="OptionDescriptionFbLogFile" xml:space="preserve">
    <value>Location of Firebird diagnostics log file. Note: Only applicable to builds that include the debug Firerbird library.</value>
  </data>
  <data name="OptionDescriptionIncludeAppConnections" xml:space="preserve">
    <value>If enabled, includes any configured connection strings that exist in a solution's projects in the drop down selection lists when adding a new connection.</value>
  </data>
  <data name="OptionDescriptionLogFile" xml:space="preserve">
    <value>Location of diagnostics log file.</value>
  </data>
  <data name="OptionDescriptionPersistentValidation" xml:space="preserve">
    <value>Enables persistent validation flags. If disabled the validation flag of solutions and projects will be repeated upon reopening if Validation is enabled. Only applicable to DEBUG builds.</value>
  </data>
  <data name="OptionDescriptionSaveExtrapolatedXml" xml:space="preserve">
    <value>Saves the extrapolated IVsDataObjectSupport xml (TObjectSupport.xml), after imports, to the directory location of the diagnostics log file.</value>
  </data>
  <data name="OptionDescriptionShowDiagramPane" xml:space="preserve">
    <value>Sets the query designer diagram pane to visible when a table or view's data is initially retrieved.</value>
  </data>
  <data name="OptionDescriptionValidateConfig" xml:space="preserve">
    <value>Enable this option to allow BlackbirdSql to ensure that Firebird EntityFramework is configured in your non-CPS projects' App.config.</value>
  </data>
  <data name="OptionDescriptionValidateEdmx" xml:space="preserve">
    <value>Enable this option to allow BlackbirdSql to update legacy edmx models to use EntityFramework 6.</value>
  </data>
  <data name="OptionDialogFbLogFile" xml:space="preserve">
    <value>Select the folder to be used for the Firebird diagnostics log file.</value>
  </data>
  <data name="OptionDialogFilterFbLogFile" xml:space="preserve">
    <value>All Files(*.*)|*.*</value>
  </data>
  <data name="OptionDialogFilterLogFile" xml:space="preserve">
    <value>All Files(*.*)|*.*</value>
  </data>
  <data name="OptionDialogLogFile" xml:space="preserve">
    <value>Select the folder to be used for the diagnostics log file.</value>
  </data>
  <data name="OptionDisplayEnableDiagnostics" xml:space="preserve">
    <value>Enable diagnostics</value>
  </data>
  <data name="OptionDisplayEnableDiagnosticsLog" xml:space="preserve">
    <value>Enable diagnostics logging</value>
  </data>
  <data name="OptionDisplayEnableFbDiagnostics" xml:space="preserve">
    <value>Enable Firebird diagnostics</value>
  </data>
  <data name="OptionDisplayEnableSaveExtrapolatedXml" xml:space="preserve">
    <value>Save extrapolated xml</value>
  </data>
  <data name="OptionDisplayEnableTaskLog" xml:space="preserve">
    <value>Enable task logging</value>
  </data>
  <data name="OptionDisplayEnableTrace" xml:space="preserve">
    <value>Enable trace</value>
  </data>
  <data name="OptionDisplayEnableTracer" xml:space="preserve">
    <value>Enable tracer</value>
  </data>
  <data name="OptionDisplayFbLogFile" xml:space="preserve">
    <value>Firebird Log file</value>
  </data>
  <data name="OptionDisplayIncludeAppConnections" xml:space="preserve">
    <value>Include solution connections</value>
  </data>
  <data name="OptionDisplayLogFile" xml:space="preserve">
    <value>Log file</value>
  </data>
  <data name="OptionDisplayPersistentValidation" xml:space="preserve">
    <value>Persistent validation flags</value>
  </data>
  <data name="OptionDisplayShowDiagramPane" xml:space="preserve">
    <value>Initial state of Diagram Pane</value>
  </data>
  <data name="OptionDisplayValidateConfig" xml:space="preserve">
    <value>Validate App.config</value>
  </data>
  <data name="OptionDisplayValidateEdmx" xml:space="preserve">
    <value>Update legacy edmx models</value>
  </data>
  <data name="OptionPageCategory" xml:space="preserve">
    <value>BlackbirdSql DDEX 2.0</value>
  </data>
  <data name="OptionPageNameDebug" xml:space="preserve">
    <value>Debugging</value>
  </data>
  <data name="OptionPageNameGeneral" xml:space="preserve">
    <value>General</value>
  </data>
</root>