<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LinkageParser_CaptionLinkageTimeout" xml:space="preserve">
    <value>Trigger linkage parser timeout</value>
  </data>
  <data name="LinkageParser_TextLinkageParser" xml:space="preserve">
    <value>A trigger linkage parser has exceeded the configured timeout period for linking it's triggers and generators. 
(Aborting may result in invalid trigger information)

Extend the allotted linkage time by {0} seconds?</value>
  </data>
  <data name="RctManager_CaptionConnectionChanged" xml:space="preserve">
    <value>Connection changed</value>
  </data>
  <data name="RctManager_CaptionConnectionChangeDatabaseNameConflict" xml:space="preserve">
    <value>Connection change Database name conflict</value>
  </data>
  <data name="RctManager_CaptionConnectionChangeNameConflict" xml:space="preserve">
    <value>Connection change ConnectionName conflict</value>
  </data>
  <data name="RctManager_CaptionConnectionModified" xml:space="preserve">
    <value>Connection modification warning</value>
  </data>
  <data name="RctManager_CaptionConnectionNameChange" xml:space="preserve">
    <value>ConnectionName change</value>
  </data>
  <data name="RctManager_CaptionConnectionNameConflict" xml:space="preserve">
    <value>ConnectionName conflict</value>
  </data>
  <data name="RctManager_CaptionDatabaseNameConflict" xml:space="preserve">
    <value>Database name conflict</value>
  </data>
  <data name="RctManager_CaptionInvalidConnectionName" xml:space="preserve">
    <value>Invalid connection name</value>
  </data>
  <data name="RctManager_CaptionNewConnection" xml:space="preserve">
    <value>New connection</value>
  </data>
  <data name="RctManager_CaptionNewConnectionDatabaseNameConflict" xml:space="preserve">
    <value>New connection Database name conflict</value>
  </data>
  <data name="RctManager_CaptionNewConnectionNameConflict" xml:space="preserve">
    <value>New connection ConnectionName conflict</value>
  </data>
  <data name="RctManager_TextConnectionChanged" xml:space="preserve">
    <value>The modifed settings are allocated to connection '{0}', and will be applied to it instead.

Continue?</value>
  </data>
  <data name="RctManager_TextConnectionChangeDatabaseNameConflict" xml:space="preserve">
    <value>The modifed settings are allocated to connection '{0}', and will be applied to it instead.
The Proposed Database Name '{1}' is already allocated  and '{2}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextConnectionChangeNameConflict" xml:space="preserve">
    <value>The modifed settings are allocated to connection '{0}', and will be applied to it instead.
The Proposed Connection Name '{1}' is already allocated and '{2}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextConnectionNameConflict" xml:space="preserve">
    <value>The Proposed Connection Name '{0}' is already allocated to another connection and '{1}' will be used instead.
Any modified settings will be applied to the alternate connection.

Continue?</value>
  </data>
  <data name="RctManager_TextConnectionNameConflictLong" xml:space="preserve">
    <value>The Name '{0}' is already allocated to another connection and '{1}' will be used instead.

Continue?

(Note: The RunningConnectionTable keeps track of all connections and connection names, even if they are deleted or renamed in Server Explorer, so that windows that may be using them can still be serviced. Reload the solution to refresh the Rct.)</value>
  </data>
  <data name="RctManager_TextDatabaseNameConflict" xml:space="preserve">
    <value>The Proposed Database Name '{0}' is already allocated to another connection and '{1}' will be used instead.
Any modified settings will be applied to the alternate connection.

Continue?</value>
  </data>
  <data name="RctManager_TextInvalidConnectionName" xml:space="preserve">
    <value>Connection names beginning with '{0}' are reserved for connection monikers. The ConnectionName '{1}' is not permitted.</value>
  </data>
  <data name="RctManager_TextNewConnectionDatabaseNameConflict" xml:space="preserve">
    <value>The settings provided will create a new connection.
The Proposed Database Name '{0}' is already allocated and '{1}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextNewConnectionNameConflict" xml:space="preserve">
    <value>The settings provided will create a new connection.
The Proposed Connection Name '{0}' is already allocated and '{1}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextNewSEConnection" xml:space="preserve">
    <value>A new Server Explorer Connection will be created. Continue?</value>
  </data>
  <data name="RctManager_TextNewSEConnectionDatabaseNameConflict" xml:space="preserve">
    <value>The settings provided will create a new Server Explorer connection.
The Proposed Database Name '{0}' is already allocated and '{1}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextNewSEConnectionNameConflict" xml:space="preserve">
    <value>The settings provided will create a new Server Explorer connection.
The Proposed Connection Name '{0}' is already allocated and '{1}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextNewSessionConnection" xml:space="preserve">
    <value>The settings provided will create a new Session connection. Continue?</value>
  </data>
  <data name="RctManager_TextNewSessionConnectionDatabaseNameConflict" xml:space="preserve">
    <value>The settings provided will create a new Session connection.
The Proposed Database Name '{0}' is already allocated and '{1}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextNewSessionConnectionNameConflict" xml:space="preserve">
    <value>The settings provided will create a new Session connection.
The Proposed Connection Name '{0}' is already allocated and '{1}' will be used instead.

Continue?</value>
  </data>
  <data name="RctManager_TextNewSessionSEConnection" xml:space="preserve">
    <value>The settings provided will add a new Server Explorer connection. Continue?</value>
  </data>
  <data name="RctManager_TextSEConnectionModified" xml:space="preserve">
    <value>Any modified settings will be applied to the existing Server Explorer Connection '{0}'.

Continue?</value>
  </data>
  <data name="RctManager_TextSEConnectionNameChange" xml:space="preserve">
    <value>The existing Server Explorer Connection's name for '{0}' will be modified.

Continue?</value>
  </data>
</root>