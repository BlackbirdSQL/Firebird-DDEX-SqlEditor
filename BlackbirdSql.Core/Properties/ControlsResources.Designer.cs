//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackbirdSql.Core.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ControlsResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ControlsResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BlackbirdSql.Core.Properties.ControlsResources", typeof(ControlsResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger linkage parser timeout.
        /// </summary>
        internal static string LinkageParser_CaptionLinkageTimeout {
            get {
                return ResourceManager.GetString("LinkageParser_CaptionLinkageTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A trigger linkage parser has exceeded the configured timeout period for linking it&apos;s triggers and generators. 
        ///(Aborting may result in invalid trigger information)
        ///
        ///Extend the allotted linkage time by {0} seconds?.
        /// </summary>
        internal static string LinkageParser_TextLinkageParser {
            get {
                return ResourceManager.GetString("LinkageParser_TextLinkageParser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection changed.
        /// </summary>
        internal static string RctManager_CaptionConnectionChanged {
            get {
                return ResourceManager.GetString("RctManager_CaptionConnectionChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection change Database name conflict.
        /// </summary>
        internal static string RctManager_CaptionConnectionChangeDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_CaptionConnectionChangeDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection change ConnectionName conflict.
        /// </summary>
        internal static string RctManager_CaptionConnectionChangeNameConflict {
            get {
                return ResourceManager.GetString("RctManager_CaptionConnectionChangeNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ConnectionName change.
        /// </summary>
        internal static string RctManager_CaptionConnectionNameChange {
            get {
                return ResourceManager.GetString("RctManager_CaptionConnectionNameChange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ConnectionName conflict.
        /// </summary>
        internal static string RctManager_CaptionConnectionNameConflict {
            get {
                return ResourceManager.GetString("RctManager_CaptionConnectionNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database name conflict.
        /// </summary>
        internal static string RctManager_CaptionDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_CaptionDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid connection name.
        /// </summary>
        internal static string RctManager_CaptionInvalidConnectionName {
            get {
                return ResourceManager.GetString("RctManager_CaptionInvalidConnectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New connection.
        /// </summary>
        internal static string RctManager_CaptionNewConnection {
            get {
                return ResourceManager.GetString("RctManager_CaptionNewConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New connection Database name conflict.
        /// </summary>
        internal static string RctManager_CaptionNewConnectionDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_CaptionNewConnectionDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New connection ConnectionName conflict.
        /// </summary>
        internal static string RctManager_CaptionNewConnectionNameConflict {
            get {
                return ResourceManager.GetString("RctManager_CaptionNewConnectionNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modifed settings are allocated to connection &apos;{0}&apos;, and will be applied to it instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextConnectionChanged {
            get {
                return ResourceManager.GetString("RctManager_TextConnectionChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modifed settings are allocated to connection &apos;{0}&apos;, and will be applied to it instead.
        ///The Proposed Database Name &apos;{1}&apos; is already allocated  and &apos;{2}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextConnectionChangeDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextConnectionChangeDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modifed settings are allocated to connection &apos;{0}&apos;, and will be applied to it instead.
        ///The Proposed Connection Name &apos;{1}&apos; is already allocated and &apos;{2}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextConnectionChangeNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextConnectionChangeNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Proposed Connection Name &apos;{0}&apos; is already allocated to another connection and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextConnectionNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextConnectionNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name &apos;{0}&apos; is already allocated to another connection and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?
        ///
        ///(Note: The RunningConnectionTable keeps track of all connections and connection names, even if they are deleted or renamed in Server Explorer, so that windows that may be using them can still be serviced. Reload the solution to refresh the Rct.).
        /// </summary>
        internal static string RctManager_TextConnectionNameConflictLong {
            get {
                return ResourceManager.GetString("RctManager_TextConnectionNameConflictLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Proposed Database Name &apos;{0}&apos; is already allocated to another connection and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection names beginning with &apos;{0}&apos; are reserved for connection monikers. The ConnectionName &apos;{1}&apos; is not permitted..
        /// </summary>
        internal static string RctManager_TextInvalidConnectionName {
            get {
                return ResourceManager.GetString("RctManager_TextInvalidConnectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new connection. Continue?.
        /// </summary>
        internal static string RctManager_TextNewConnection {
            get {
                return ResourceManager.GetString("RctManager_TextNewConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new connection.
        ///The Proposed Database Name &apos;{0}&apos; is already allocated and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextNewConnectionDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextNewConnectionDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new connection.
        ///The Proposed Connection Name &apos;{0}&apos; is already allocated and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextNewConnectionNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextNewConnectionNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new Server Explorer Connection will be created. Continue?.
        /// </summary>
        internal static string RctManager_TextNewSEConnection {
            get {
                return ResourceManager.GetString("RctManager_TextNewSEConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new Server Explorer connection.
        ///The Proposed Database Name &apos;{0}&apos; is already allocated and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextNewSEConnectionDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextNewSEConnectionDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new Server Explorer connection.
        ///The Proposed Connection Name &apos;{0}&apos; is already allocated and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextNewSEConnectionNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextNewSEConnectionNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new Session connection. Continue?.
        /// </summary>
        internal static string RctManager_TextNewSessionConnection {
            get {
                return ResourceManager.GetString("RctManager_TextNewSessionConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new Session connection.
        ///The Proposed Database Name &apos;{0}&apos; is already allocated and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextNewSessionConnectionDatabaseNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextNewSessionConnectionDatabaseNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings provided will create a new Session connection.
        ///The Proposed Connection Name &apos;{0}&apos; is already allocated and &apos;{1}&apos; will be used instead.
        ///
        ///Continue?.
        /// </summary>
        internal static string RctManager_TextNewSessionConnectionNameConflict {
            get {
                return ResourceManager.GetString("RctManager_TextNewSessionConnectionNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The existing Server Explorer Connection&apos;s name will be modified. Continue?.
        /// </summary>
        internal static string RctManager_TextSEConnectionNameChange {
            get {
                return ResourceManager.GetString("RctManager_TextSEConnectionNameChange", resourceCulture);
            }
        }
    }
}
