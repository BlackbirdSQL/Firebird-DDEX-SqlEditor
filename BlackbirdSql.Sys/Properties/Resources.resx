<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ByteSizeBytes" xml:space="preserve">
    <value>bytes</value>
  </data>
  <data name="ByteSizeEB" xml:space="preserve">
    <value>EB</value>
  </data>
  <data name="ByteSizeGB" xml:space="preserve">
    <value>GB</value>
  </data>
  <data name="ByteSizeKB" xml:space="preserve">
    <value>KB</value>
  </data>
  <data name="ByteSizeMB" xml:space="preserve">
    <value>MB</value>
  </data>
  <data name="ByteSizePB" xml:space="preserve">
    <value>PB</value>
  </data>
  <data name="ByteSizeTB" xml:space="preserve">
    <value>TB</value>
  </data>
  <data name="ByteSizeYB" xml:space="preserve">
    <value>YB</value>
  </data>
  <data name="ByteSizeZB" xml:space="preserve">
    <value>ZB</value>
  </data>
  <data name="DatasetKeyAlternateFormat" xml:space="preserve">
    <value>Database["{0} ({1})"]</value>
  </data>
  <data name="DatasetKeyFormat" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="Diag_FormatExceptionError" xml:space="preserve">
    <value>[{0}] {1} {2}</value>
  </data>
  <data name="Diag_FormatExceptionNoError" xml:space="preserve">
    <value>[{0} {1}] {2} {3}</value>
  </data>
  <data name="Diag_FormatExceptionSqlException" xml:space="preserve">
    <value>{@dbEngine} error code: {@errorCode}, Class: {@class}, Proc: {@procedure}, Line: {@line}.</value>
  </data>
  <data name="Diag_FormatExceptionStackTrace" xml:space="preserve">
    <value>TRACE: {0}</value>
  </data>
  <data name="Diag_FormatIsExceptionWithMessage" xml:space="preserve">
    <value>{@context}::EXCEPTION: {@datetime}:   {@memberName} :: {@sourcePath} :: {@line}
	{@message}
</value>
  </data>
  <data name="Diag_FormatIsExceptionWithoutMessage" xml:space="preserve">
    <value>{@context}::EXCEPTION: {@datetime}:   {@memberName} :: {@sourcePath} :: {@line}
</value>
  </data>
  <data name="Diag_FormatMessageOnly" xml:space="preserve">
    <value>{0}:   {1}</value>
  </data>
  <data name="Diag_FormatNotExceptionWithMessage" xml:space="preserve">
    <value>{@context}: {@datetime}:   {@memberName} :: {@sourcePath} :: {@line}
	{@message}
</value>
  </data>
  <data name="Diag_FormatNotExceptionWithoutMessage" xml:space="preserve">
    <value>{@context}: {@datetime}:   {@memberName} :: {@sourcePath} :: {@line}</value>
  </data>
  <data name="ExceptionAddPrimarySynonym" xml:space="preserve">
    <value>Failed to add primary synonym for {0}.</value>
  </data>
  <data name="ExceptionAddSynonymDescriberKeyNotFound" xml:space="preserve">
    <value>Describer key '{0}' not found for adding a synonym: {1}.</value>
  </data>
  <data name="ExceptionCopyToArrayTooSmall" xml:space="preserve">
    <value>CopyTo array to small. Length: {0}, Dictionary count: {1}, Index: {2}</value>
  </data>
  <data name="ExceptionCopyToArrayTypeMismatch" xml:space="preserve">
    <value>CopyTo invalid array type. From: {0}, To: {1}</value>
  </data>
  <data name="ExceptionCopyToIndexOutOfRange" xml:space="preserve">
    <value>CopyTo index [{0}] out of range. Array length: {1}</value>
  </data>
  <data name="ExceptionCopyToInvalidArrayType" xml:space="preserve">
    <value>CopyTo invalid array type: {0}</value>
  </data>
  <data name="ExceptionCopyToNonZeroLowerBound" xml:space="preserve">
    <value>CopyTo non-zero lowerbound</value>
  </data>
  <data name="ExceptionCopyToRankMultiDimNotSupported" xml:space="preserve">
    <value>CopyTo rank multi-dimension not supported</value>
  </data>
  <data name="ExceptionCreateAbstractClass" xml:space="preserve">
    <value>Cannot instantiate {0} from abstract ancestor</value>
  </data>
  <data name="ExceptionCsbAttributeNotFound" xml:space="preserve">
    <value>Property {0} {1} not found in Csb.</value>
  </data>
  <data name="ExceptionCsbPropertyNotFound" xml:space="preserve">
    <value>Property {0} not found in Csb.</value>
  </data>
  <data name="ExceptionDescriberNotFound" xml:space="preserve">
    <value>Describer {0} not found.</value>
  </data>
  <data name="ExceptionDescriberNotFoundOrAddFailure" xml:space="preserve">
    <value>Describer {0} not found or unable to add to array.</value>
  </data>
  <data name="ExceptionDiagInternalLog" xml:space="preserve">
    <value>{0} sourcePath: {1} memberName: {2} sourceLineNumber: {3} message: {4}</value>
  </data>
  <data name="ExceptionDiagStreamWriter" xml:space="preserve">
    <value>DIAG EXCEPTION: {0}
{1}</value>
  </data>
  <data name="ExceptionDuplicateKey" xml:space="preserve">
    <value>Attempt to add duplicate key: {0}</value>
  </data>
  <data name="ExceptionDuplicateSingletonInstances" xml:space="preserve">
    <value>Singleton instance already exists. Attempt to create duplicate {0} instances.</value>
  </data>
  <data name="ExceptionEdmVersioningFacadeDependencyResolverInstance" xml:space="preserve">
    <value>Could not get EDM VersioningFacade.DependencyResolver instance.</value>
  </data>
  <data name="ExceptionEdmVersioningFacadeDependencyResolverType" xml:space="preserve">
    <value>Could not get EDM VersioningFacade.DependencyResolver type.</value>
  </data>
  <data name="ExceptionEnumerationFailed" xml:space="preserve">
    <value>Enumeration failed</value>
  </data>
  <data name="ExceptionEventProjectExit" xml:space="preserve">
    <value>Attempt to exit project event when not in a project event. _EventProjectCardinal: {0}</value>
  </data>
  <data name="ExceptionEventProjectRegistrationExit" xml:space="preserve">
    <value>Attempt to exit project event registration when events were not being registered. _EventProjectCardinal: {0}</value>
  </data>
  <data name="ExceptionEventRdtExit" xml:space="preserve">
    <value>Attempt to exit RDT event when not in an Rdt event. _EventRdtCardinal: {0}</value>
  </data>
  <data name="ExceptionEventReindexingExit" xml:space="preserve">
    <value>Attempt to exit Reindexing event when not in a Reindexing event. _EventReindexingCardinal: {0}</value>
  </data>
  <data name="ExceptionExtractEquivalencyKeys" xml:space="preserve">
    <value>Could not extract Equivalency keys from User Options</value>
  </data>
  <data name="ExceptionGetTypeAbort" xml:space="preserve">
    <value>Could not get type: {0}. Aborting."</value>
  </data>
  <data name="ExceptionHashTagCapacityOverflow" xml:space="preserve">
    <value>Hashtag capacity overflow</value>
  </data>
  <data name="ExceptionIndexNegative" xml:space="preserve">
    <value>Index cannot be negative</value>
  </data>
  <data name="ExceptionIndexOutOfRange" xml:space="preserve">
    <value>Index out of range. {0}: {1}</value>
  </data>
  <data name="ExceptionInvalidCastKey" xml:space="preserve">
    <value>Invalid key cast. From: {0}, To: {1}</value>
  </data>
  <data name="ExceptionInvalidCastValue" xml:space="preserve">
    <value>Invalid value cast. From: {0}, To: {1}</value>
  </data>
  <data name="ExceptionInvalidKeyType" xml:space="preserve">
    <value>Invalid key Type: {0}</value>
  </data>
  <data name="ExceptionInvalidValueType" xml:space="preserve">
    <value>Invalid value Type: {0}</value>
  </data>
  <data name="ExceptionIsOnUiThread" xml:space="preserve">
    <value>{0} may NOT be called on the UI thread.</value>
  </data>
  <data name="ExceptionNonNegativeRequired" xml:space="preserve">
    <value>Value must be non-negative</value>
  </data>
  <data name="ExceptionNotOnUiThread" xml:space="preserve">
    <value>{0} must be called on the UI thread.</value>
  </data>
  <data name="ExceptionOutputWindowPaneNull" xml:space="preserve">
    <value>OutputWindowPane is null</value>
  </data>
  <data name="ExceptionProjectPropertiesTimeout" xml:space="preserve">
    <value>Time out waiting for project properties to load: {0}.</value>
  </data>
  <data name="ExceptionSerializationMissingKeys" xml:space="preserve">
    <value>Missing keys</value>
  </data>
  <data name="ExceptionSerializationNullKey" xml:space="preserve">
    <value>Null key</value>
  </data>
  <data name="ExceptionSingletonInstanceNotInitialized" xml:space="preserve">
    <value>The singleton instance for {0} has not been initialized.</value>
  </data>
  <data name="ExceptionSynonymDescriberNotFound" xml:space="preserve">
    <value>The synonym '{0}' has no describer</value>
  </data>
  <data name="FormatByteSize" xml:space="preserve">
    <value>{0:n{@decimals}} {1}</value>
  </data>
  <data name="FormatExpByteSize" xml:space="preserve">
    <value>{0:n{@decimals}} (10{1})</value>
  </data>
  <data name="LabelDatabasePath" xml:space="preserve">
    <value>Database path: {database}</value>
  </data>
  <data name="LabelDescriber" xml:space="preserve">
    <value>Describer: {0}</value>
  </data>
  <data name="LabelProjectItemIsLink" xml:space="preserve">
    <value>Type: {0}, Value: {1}.</value>
  </data>
  <data name="LabelSynonym" xml:space="preserve">
    <value>Synonym: {0}</value>
  </data>
  <data name="ReindexAssemblies_All" xml:space="preserve">
    <value>All Projects</value>
  </data>
  <data name="ReindexAssemblies_ProjectName" xml:space="preserve">
    <value>Project : {0}</value>
  </data>
  <data name="StringNullValue" xml:space="preserve">
    <value>Null</value>
  </data>
</root>