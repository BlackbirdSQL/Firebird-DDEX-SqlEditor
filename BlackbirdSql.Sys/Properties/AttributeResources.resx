<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PropertyCategoryAdvanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="PropertyCategoryConnection" xml:space="preserve">
    <value>Connection</value>
  </data>
  <data name="PropertyCategoryData" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="PropertyCategoryPooling" xml:space="preserve">
    <value>Pooling</value>
  </data>
  <data name="PropertyCategorySecurity" xml:space="preserve">
    <value>Security</value>
  </data>
  <data name="PropertyCategorySource" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="PropertyDescriptionApplicationName" xml:space="preserve">
    <value>The optional name of the application making the connection. This property can also be used to make equivalent connections distinctly unique.</value>
  </data>
  <data name="PropertyDescriptionCharset" xml:space="preserve">
    <value>The database character set encoding.</value>
  </data>
  <data name="PropertyDescriptionClientLibrary" xml:space="preserve">
    <value>Embedded database client library. Use 'fbembed' for Firebird 2, 'fbclient' for 3 and 'fbembed45\fbclient' for 4 and 5.</value>
  </data>
  <data name="PropertyDescriptionCommandTimeout" xml:space="preserve">
    <value>The timeout (in seconds) to wait for a command to complete execution or zero for no limit.</value>
  </data>
  <data name="PropertyDescriptionCompression" xml:space="preserve">
    <value>Enables or disables wire compression.</value>
  </data>
  <data name="PropertyDescriptionConnectionLifeTime" xml:space="preserve">
    <value>The time (in seconds) before unused connections in the connection pool are disposed.</value>
  </data>
  <data name="PropertyDescriptionConnectionString" xml:space="preserve">
    <value>The connection string used to connect to the Data Source.</value>
  </data>
  <data name="PropertyDescriptionConnectionTimeout" xml:space="preserve">
    <value>The timeout (in seconds) to wait for a connection to open.</value>
  </data>
  <data name="PropertyDescriptionCryptKey" xml:space="preserve">
    <value>The encryption key to be used for database encryption.</value>
  </data>
  <data name="PropertyDescriptionDatabase" xml:space="preserve">
    <value>The local path or alias on the server to the database file.</value>
  </data>
  <data name="PropertyDescriptionDataSource" xml:space="preserve">
    <value>The database server name. Leave as 'localhost' for embedded databases.</value>
  </data>
  <data name="PropertyDescriptionDbCachePages" xml:space="preserve">
    <value>The number of cache buffers to allocate to this session.</value>
  </data>
  <data name="PropertyDescriptionDialect" xml:space="preserve">
    <value>The database SQL dialect.</value>
  </data>
  <data name="PropertyDescriptionEnlist" xml:space="preserve">
    <value>If true, enlists the connections in the current transaction.</value>
  </data>
  <data name="PropertyDescriptionFetchSize" xml:space="preserve">
    <value>The maximum number of rows to be fetched in a single call to read into the internal row buffer.</value>
  </data>
  <data name="PropertyDescriptionIsolationLevel" xml:space="preserve">
    <value>The default Isolation Level for implicit transactions.</value>
  </data>
  <data name="PropertyDescriptionMaxPoolSize" xml:space="preserve">
    <value>The maximum number of connections allowed in a pool.</value>
  </data>
  <data name="PropertyDescriptionMinPoolSize" xml:space="preserve">
    <value>The minimum number of connections allowed in a pool.</value>
  </data>
  <data name="PropertyDescriptionNoDatabaseTriggers" xml:space="preserve">
    <value>Disables database triggers for this connection.</value>
  </data>
  <data name="PropertyDescriptionNoGarbageCollect" xml:space="preserve">
    <value>If true, disables a garbage collect the database upon attachment.</value>
  </data>
  <data name="PropertyDescriptionPacketSize" xml:space="preserve">
    <value>The size (in bytes) of network packets. The Packet Size can be in the range of 512 - 32767 bytes.</value>
  </data>
  <data name="PropertyDescriptionParallelWorkers" xml:space="preserve">
    <value>The number of parallel workers that can be allocated for database operations.</value>
  </data>
  <data name="PropertyDescriptionPassword" xml:space="preserve">
    <value>The database user login password.</value>
  </data>
  <data name="PropertyDescriptionPooling" xml:space="preserve">
    <value>If true then identical connections will use a common connection from the appropriate pool.</value>
  </data>
  <data name="PropertyDescriptionPort" xml:space="preserve">
    <value>The TCP/IP port for server connections. Leave as '3050' for embedded databases.</value>
  </data>
  <data name="PropertyDescriptionReturnRecordsAffected" xml:space="preserve">
    <value>Includes the number of rows affected in the result set if set to true.</value>
  </data>
  <data name="PropertyDescriptionRole" xml:space="preserve">
    <value>The user role.</value>
  </data>
  <data name="PropertyDescriptionServerType" xml:space="preserve">
    <value>The physical server type. For embedded remember to set the 'ClientLibrary' as described in it's Description.</value>
  </data>
  <data name="PropertyDescriptionUserID" xml:space="preserve">
    <value>The database user login ID.</value>
  </data>
  <data name="PropertyDescriptionWireCrypt" xml:space="preserve">
    <value>The wire encryption method.</value>
  </data>
  <data name="PropertyDisplayApplicationName" xml:space="preserve">
    <value>Application Name</value>
  </data>
  <data name="PropertyDisplayCharset" xml:space="preserve">
    <value>Character Set</value>
  </data>
  <data name="PropertyDisplayClientLibrary" xml:space="preserve">
    <value>Client Library</value>
  </data>
  <data name="PropertyDisplayCommandTimeout" xml:space="preserve">
    <value>Command Timeout</value>
  </data>
  <data name="PropertyDisplayCompression" xml:space="preserve">
    <value>Compression</value>
  </data>
  <data name="PropertyDisplayConnectionLifeTime" xml:space="preserve">
    <value>Connection Lifetime</value>
  </data>
  <data name="PropertyDisplayConnectionString" xml:space="preserve">
    <value>ConnectionString</value>
  </data>
  <data name="PropertyDisplayConnectionTimeout" xml:space="preserve">
    <value>Connection Timeout</value>
  </data>
  <data name="PropertyDisplayCryptKey" xml:space="preserve">
    <value>Crypt Key</value>
  </data>
  <data name="PropertyDisplayDatabase" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="PropertyDisplayDataSource" xml:space="preserve">
    <value>DataSource</value>
  </data>
  <data name="PropertyDisplayDbCachePages" xml:space="preserve">
    <value>Cache Pages</value>
  </data>
  <data name="PropertyDisplayDialect" xml:space="preserve">
    <value>Dialect</value>
  </data>
  <data name="PropertyDisplayEnlist" xml:space="preserve">
    <value>Enlist</value>
  </data>
  <data name="PropertyDisplayFetchSize" xml:space="preserve">
    <value>Fetch Size</value>
  </data>
  <data name="PropertyDisplayIsolationLevel" xml:space="preserve">
    <value>Isolation Level</value>
  </data>
  <data name="PropertyDisplayMaxPoolSize" xml:space="preserve">
    <value>Maximum Pool Size</value>
  </data>
  <data name="PropertyDisplayMinPoolSize" xml:space="preserve">
    <value>Minimum Pool Size</value>
  </data>
  <data name="PropertyDisplayNoDatabaseTriggers" xml:space="preserve">
    <value>No Triggers</value>
  </data>
  <data name="PropertyDisplayNoGarbageCollect" xml:space="preserve">
    <value>Disable Garbage Collect</value>
  </data>
  <data name="PropertyDisplayPacketSize" xml:space="preserve">
    <value>Packet Size</value>
  </data>
  <data name="PropertyDisplayParallelWorkers" xml:space="preserve">
    <value>Parallel Workers</value>
  </data>
  <data name="PropertyDisplayPassword" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PropertyDisplayPooling" xml:space="preserve">
    <value>Pooling</value>
  </data>
  <data name="PropertyDisplayPort" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="PropertyDisplayReturnRecordsAffected" xml:space="preserve">
    <value>Return Records Affected</value>
  </data>
  <data name="PropertyDisplayRole" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="PropertyDisplayServerType" xml:space="preserve">
    <value>Server Type</value>
  </data>
  <data name="PropertyDisplayUserID" xml:space="preserve">
    <value>User ID</value>
  </data>
  <data name="PropertyDisplayWireCrypt" xml:space="preserve">
    <value>Wire Crypt</value>
  </data>
</root>